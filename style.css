* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  /* This is the typical CSS reset. */
}

 /* box-height: height of one item */
  /* margin: how much of the next and previous item you can see when centered on an item */
  /* n: number of items in addition to initial 3 (total items = 3 + n) */
:root {
  --box-height: 320px;
  --margin: 70px;
  --n: 5;
}

body {
    font-family: "Open Sans", sans-serif;
    color:#2E1013;
}


h1 {
    font-family:Merriweather, serif;
}

  /* I wanted to add a gradient to add a slight 3D feel, but I came across an issue where if my gradient was covering my :hover properties, I wouldn't be able to activate them due to the z-index. */
.gradient-top {
  height: 20vh;
  width: 100vw;
  z-index: 1;
  position: fixed;
  top: 0;
  left: 0;
  background: linear-gradient(black, 50%, transparent);
}

.gradient-bottom {
    height: 20vh;
    width: 100vw;
    z-index: 1;
    position: fixed;
    bottom: 0;
    left: 0;
    background: linear-gradient(transparent, 50%, black);
  }

  /* The big container contains the entire body of the page, and organizes the individual items via flexbox. I calculated the padding and total height of the document by induction on base n = 3. This allows me to adjust the height of the document properly just by changing the variable n if I decide to add or remove items. */
.big-container {
  background: #593347;
  padding-top: calc((100vh - var(--box-height)) / 2);
  padding-bottom: calc((100vh - var(--box-height)) / 2);
  height: calc(
    200vh + var(--box-height) - 2 * var(--margin) +
      (100vh + var(--box-height) - 2 * var(--margin)) * var(--n) / 2
  );
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
}

/* Each main div represents one Beanie Baby. */
.main {
  height: 80vw;
  width: 80vw;
  max-width: var(--box-height);
  max-height: var(--box-height);
  background-color: #f1d3e3;
  border-radius: 15px;
  display:flex;
  flex-direction:column;
  align-content:center;
  justify-content:space-around;
  box-shadow:10px 10px 30px #2E1013;
}

/* The height of the item increases to accommodate the name of the Beanie Baby. */
.main:hover {
    max-height: 460px;
    height:460px;
    transition: height 0.5s, max-height 0.5s;
}

.name {
    height:0;
    padding:0px 10px;
    text-align:center;
    opacity:0;
}

/* Applying a style to the name adjacent to a hover pseudoselector allows the style to one element when another is hovered. */
.main:hover .name {
    transition: opacity 1s, height 0.5s;
    opacity:100;
    height:100px;
}

.main img {
  max-width: min(var(--box-height), 100%);
  height: auto;
}

/* Adding borders to two sides of a box and rotating allow us to create up and down arrows. */
.arrow {
  border: solid #f5f5f5;
  border-width: 0 10px 10px 0;
  height: 60px;
  width: 60px;
  position: fixed;
  left: 50%;
}

/* I tried to make unobtrusive arrows to indicate that the screen can be scrolled. I wanted to hide the up arrow if we're at the top of the page, but I couldn't think of a good way to do that without JavaScript. */
@keyframes up {
  0% {
    top: 5%;
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    top: -5%;
    opacity: 0;
  }
}

@keyframes down {
    0% {
      bottom: 5%;
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
    100% {
      bottom: -5%;
      opacity: 0;
    }
  }

.up {
  top: 5%;
  transform: translate(-50%, 0) rotate(-135deg);
  animation-name: up;
  animation-duration: 4s;
  animation-iteration-count: infinite;
}

.down {
  bottom: 5%;
  transform: translate(-50%, 0) rotate(45deg);
  animation-name: down;
  animation-duration: 4s;
  animation-iteration-count: infinite;
}
}
